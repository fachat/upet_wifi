
;
; This little program short-cuts between the serial0 port
; - i.e. the one with the real RS232 drivers and DB9 connector -A
; and the programming port of the ESP-C3-WROOM on the wifi module.
;
; I.e. it transfers all data from the WROOM to the serial0 and
; vice versa. This way the programming port of the WROOM
; becomes virtually available on the serial0 port of the UltiPET.
;
; Unfortunately this does not (yet) work with the Micro-PET.
; The Ultra-CPU board requires the UART+SIEC board for this.
;

#include "petdefs.i65"

	.(
	.word START
	*=START
	.word link
	.word 10
	.byt $9e, "1040", 0	; SYS line
link	.word 0
	.dsb 1040-*
	.)

	lda #3		; 17 MHz CPU operation
	sta $e803

	; init serial0 uart
	jsr ser0_init
	bcs exit
	jsr ser0_start

	; init SPI uart0
	jsr spiuart0_init
	bcs exit
	jsr spiuart_start

:	jsr ser0_handle
	jsr spiuart_handle
	bra :-

	sei
	.(

UART		=$e818
	
UART_DATA       =0      ; send (THR) / receive (RHR) data reg
UART_IER        =1      ; interrupt enable reg
UART_IIR        =2      ; interrupt identification (Read only)
UART_FCR        =2      ; FIFO ctrl (Write only)
UART_LCR        =3      ; Line Control Reg
UART_MCR        =4      ; Modem Control Reg
UART_LSR        =5      ; Line Status Reg
UART_MSR        =6      ; Modem Status Reg
UART_SCR        =7      ; Scratchpad

UART_TXLVL      =8      ; Transmit FIFO level
UART_RXLVL      =9      ; Receive FIFO level

	;-----------------------------------------------------------------
	; direct copy wifi -> serial uart
rxtxloop
	.(
next    ldx #UART_LSR<<3
        jsr uart_rd
        tay
        bpl toser

        ldx #UART_DATA<<3
        jsr uart_rd     ; clr error by reading byte
        bra next
toser
        ldx #UART_RXLVL<<3
        jsr uart_rd
        tay             ; number of bytes in rx FIFO
        beq towifi
        sta cnt

        jsr spisel
        ; read buffer
        lda rcmd
        ora #UART_DATA<<3
        jsr spitx

rxloop  jsr spirx

	; directly store in tx fifo for output
	sta UART+UART_DATA

        dec cnt
        bne rxloop

        jsr spidesel    ; only uses X
	.)
towifi
	;-----------------------------------------------------------------
	; direct copy serial -> wifi uart
	.(
	lda UART+UART_LSR
	lsr
	bcc rxtxloop

	jsr spisel
	lda #UART_DATA<<3
	ora wcmd
	jsr spitx

rxloop  lda UART+UART_LSR
        bpl dotx
        lda UART+UART_DATA      ; advance fifo rd ptr to clear rx err
	bra rxloop
dotx
        lsr
        bcc endrx

        lda UART+UART_DATA

	jsr spitx

        bra rxloop

endrx	jsr spidesel
	.)

	bra rxtxloop


	.)
	;-----------------------------------------------------------------

exit	sec
	brk


	; transfer buffers and pointers
	;
	; note, that they need to be 256 bytes long each

towifi_rp
	.byt 0
towifi_wp
	.byt 0

towifibuf	=$8100
	;.dsb 256

fromwifi_rp
	.byt 0
fromwifi_wp
	.byt 0

fromwifibuf	=$8200
	;.dsb 256

; definitions for the serial 0
s0_tx_buf = fromwifibuf
s0_tx_wp  = fromwifi_wp
s0_tx_rp  = fromwifi_rp

s0_rx_buf = towifibuf
s0_rx_wp  = towifi_wp
s0_rx_rp  = towifi_rp


; definition for spi uart
u0_tx_buf = towifibuf
u0_tx_wp  = towifi_wp
u0_tx_rp  = towifi_rp

u0_rx_buf = fromwifibuf
u0_rx_wp  = fromwifi_wp
u0_rx_rp  = fromwifi_rp



#include "upetspi.a65"

#define	S0_ONLY
#include "seruart.a65"

#include "spiuart.a65"

